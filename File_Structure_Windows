# File_Structure_Windows

'''
File Structure (WINDOWS)
Contrbutors: Gage Gunn

RRCC/ACC Rocksat-X 2023
This file will
1. Create all necessary folders for data storage
2. Allow files to be created (named ID [date(m-d-y)]_[time(h-m-s)])
3. Allow data to be written to said files


HOW TO USE
1. Write fs = FileStructure() at top of file

To create folders -- fs.create_folders()
    -Example: fs.create_folders()
    - Will create all folders specified within the __init__
    
To create a file -- fs.write_to_folder("[folder name]", "[subfolder name {write "" if none}]", "[initialization statement]")
    - Example: fs.write_to_folder("BME680", "Temperature", "Temperature file created on {time}")
    - Will create a csv file in designated folder
    
To write to a already created file -- fs.write_to_file("[folder name]", "[subfolder name {write None if none}]", "[data]")
    - Example: fs.write_to_folder("BME680", "Temperature", "123.45")
    - Will write to the most recently created file in a specific folder and subfolder
    
To use Flight Log - 
    1. Create flight log file at top of file - fs.write_to_folder("Flight_Log", None, "Folders initialized")
    2. Add to flight log - fs.write_to_file("Flight_Log", "", "[statement]")

---------------------------------------------------------------------- '''



### Libraries ###
import os
from datetime import datetime
import csv
import time

class FileStructure:
    
    highest_id = 0
    highest_id_path = {}

    def __init__(self):
        self.data_path = r"C:\Data"
        self.folders = ["BME680", "DOF", "MLX90640", "Flight_Log", "VL53L1X", "BNO055"]
        self.subfolders = {
            "BME680": ["Humidity", "Pressure", "Temperature"],
            "DOF": ["Accelerometer", "Magnetometer", "Gyroscope"],
            "BNO055": ["Accelerometer", "Magnetometer", "Gyroscope", "Euler_Angle", "Quaternion", "Linear_Acceleration", "Gravity"]
            }
        self.ID = 1
        self.current_time = datetime.now().strftime("%m-%d-%Y_%Hhr-%Mmin-%Ssec")
        self.stop_char = ' '

        self.highest_id = 0
        self.highest_id_path = {}

    def create_folders(self):
        try:
            os.makedirs(self.data_path)
        except FileExistsError:
            print('Data folder already exist')
            pass

        for folder in self.folders:
            path = os.path.join(self.data_path, folder)
            try:
                os.makedirs(path)
            except FileExistsError:
                print(folder + ' folder already exists')
                pass

            if folder in self.subfolders:
                for subfolder in self.subfolders[folder]:
                    subpath = os.path.join(path, subfolder)
                    try:
                        os.makedirs(subpath)
                    except FileExistsError:
                        print(subfolder + ' folder already exists')
                        pass
        
        find_highest_id(fs.data_path)

    def write_to_folder(self, folder_name, subfolder_name, data):
        while True:
            file_path = os.path.join(self.data_path, folder_name, subfolder_name, f"{self.ID} {fs.current_time}.csv")
            folder_path = os.path.join(self.data_path, folder_name, subfolder_name)
            if [file for file in os.listdir(folder_path) if file.split(fs.stop_char)[0] == str(self.ID)]:
                print(f"File with ID {self.ID} already exists.")
                self.ID += 1
            else:
                with open(file_path, 'w') as file:
                    file.write(data)
                if fs.highest_id < self.ID:
                    fs.highest_id = self.ID
                    fs.highest_id_path[folder_path] = file_path
                self.ID = 1
                break
        
        find_highest_id(fs.data_path)

    def write_to_file(self, folder_name, subfolder_name, data):
        if subfolder_name == None: #Check if there is no subfolder
            folder_path = os.path.join(fs.data_path, folder_name)
        else:
            folder_path = os.path.join(fs.data_path, folder_name, subfolder_name)
        
        find_highest_id(fs.data_path)
        file_path = fs.highest_id_path.get(folder_path)
        if file_path is None:
            print(f"No file found for folder: {folder_name}, subfolder: {subfolder_name}")
            return

        with open(file_path, 'a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow([time.time()*1000] + [data])


### Functions ###
def find_highest_id(path):
    for item in os.listdir(path):
        item_path = os.path.join(path, item)
        if os.path.isdir(item_path):
            find_highest_id(item_path)
        else:
            # Check if the file name starts with an ID
            id = item.split(" ")[0]
            if id.isdigit():
                if fs.ID > fs.highest_id:
                    fs.highest_id_path[path] = item_path
                    # fs.highest_id = int(id)
                    # fs.highest_id_path[path] = item_path


### Variables ###
fs = FileStructure()




# Create folder on write instead of 
# int(time.time()*1000) write time stamp to beginning of each line of data
